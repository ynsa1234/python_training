import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.gridspec import GridSpec
import numpy as np
# %matplotlib inline
'''
    311 Analysis for the July & August 2020
    Several issues presented themselves as we were working on the project
    1: data was too large to load (initial size we were trying was from 2010 on
    2: Website was not responsive and it took long to download the data
'''

# ----------------------------------------------------------------------------------------------------
# Set up pandas options
pd.set_option('display.max_rows', None)
pd.set_option('display.max_columns', None)
pd.set_option('display.width', None)

# ----------------------------------------------------------------------------------------------------
# Read a few columns of the dataset, ones that analysis is performed on
url = r'C:\Data Science\311_Service_Requests_from_2010_to_Present.csv'
col_header = ['Created Date', 'Closed Date', 'Complaint Type', 'Descriptor', 'City', 'Status', 'Borough']
df = pd.read_csv(url, usecols=col_header)
# Adding count helper column. Code could work w/o this data but it was meant to simplify reading
df['occur'] = 1
df['Closed Date'] = df['Closed Date'].fillna(value='9/01/2020 0:00')
print(df.head())
print('------')

# -------------------------------------------------------------------------------------
# Complaints by Day
''' Separating date part from Created Date
    Changing Created Date type to datetime
    Add Create Date column and fill na
    Create 4 comparison group and merge them
'''
df['Create Date'] = pd.to_datetime(df['Created Date'].str.split(' ', n=1, expand=True)[0]).dt.date
complaints_by_day = df.groupby('Create Date')['occur'].sum()
print(complaints_by_day)
print('------')

# -------------------------------------------------------------------------------------
# Complaint by Time To Close
df['Time To Close'] = pd.to_datetime(df['Closed Date']) - pd.to_datetime(df['Created Date'])
df['Time To Close'] = df['Time To Close'].astype('timedelta64[h]')
under_hour = df[df['Time To Close'] < 1]['occur'].count()
one_to_4_hour = df[(df['Time To Close'] >= 1) & (df['Time To Close'] < 4)]['occur'].count()
four_to_24_hour = df[(df['Time To Close'] >= 4) & (df['Time To Close'] < 24)]['occur'].count()
over_24_hour = df[df['Time To Close'] >= 24]['occur'].count()
time_to_close_lbl = ['Under 1 Hour', '1 to 4 Hours', '4 to 24 Hours', 'over 24 Hours']
time_to_close = [under_hour, one_to_4_hour, four_to_24_hour, over_24_hour]
print(df['Time To Close'].head())
print('------')

# --------------------------------------------------------------------------------------------
# Complaint by Status
status_count = df.groupby('Status')['occur'].count()
print(status_count)
print('------')

# ----------------------------------------------------------------------------------------------------
# Get 5 most complaints
df_top_complaints = df.groupby('Complaint Type')['occur'].sum().nlargest(5)
print(df_top_complaints)
df_complaint_1 = df[df['Complaint Type'] == df_top_complaints.index[0]]
df_complaint_2 = df[df['Complaint Type'] == df_top_complaints.index[1]]
df_complaint_3 = df[df['Complaint Type'] == df_top_complaints.index[2]]
df_complaint_4 = df[df['Complaint Type'] == df_top_complaints.index[3]]
df_complaint_5 = df[df['Complaint Type'] == df_top_complaints.index[4]]

# grouping complaints and counting occurrences
df_m_complaint = df_complaint_1.groupby('Borough')['occur'].sum()
df_q_complaint = df_complaint_2.groupby('Borough')['occur'].sum()
df_bx_complaint = df_complaint_3.groupby('Borough')['occur'].sum()
df_bq_complaint = df_complaint_4.groupby('Borough')['occur'].sum()
df_si_complaint = df_complaint_5.groupby('Borough')['occur'].sum()

# Merging data to one df (I find this method simpler than join or concat)
df_borough_comp = pd.merge(df_m_complaint, df_q_complaint, how='inner', on=['Borough'])
df_borough_comp = pd.merge(df_borough_comp, df_bx_complaint, how='inner', on=['Borough'])
df_borough_comp = pd.merge(df_borough_comp, df_bq_complaint, how='inner', on=['Borough'])
df_borough_comp = pd.merge(df_borough_comp, df_si_complaint, how='inner', on=['Borough'])
df_borough_comp.columns = [df_top_complaints.index[0], df_top_complaints.index[1], df_top_complaints.index[2], df_top_complaints.index[3], df_top_complaints.index[4]]
# df_borough_comp = df_borough_comp.nlargest(5, 'Manhattan')
# df_borough_comp.index = df_borough_comp.index.str.replace('NonCompliance with ', '')
print(df_borough_comp)
print('------')

# pivoting counts to use in y axis
mnhtn_count = [count for count in df_borough_comp[df_top_complaints.index[0]]]
queens_count = [count for count in df_borough_comp[df_top_complaints.index[1]]]
bronx_count = [count for count in df_borough_comp[df_top_complaints.index[2]]]
brooklyn_count = [count for count in df_borough_comp[df_top_complaints.index[3]]]
staten_island_count = [count for count in df_borough_comp[df_top_complaints.index[4]]]

# ----------------------------------------------------------------------------------------------------
# Function to add numbers in bars
def chartlabel(chart, ax):
    for bar in chart:
        height = bar.get_height()
        ax.text(bar.get_x() + bar.get_width() / 2, .5 * height,
                '%d' % int(height), rotation=90, ha='center')

# ----------------------------------------------------------------------------------------------------
# Creating font family to be later used in graphs
font = {'family': 'serif',
        'color': 'red',
        'weight': 'normal',
        'size': 20,
        }

# Creating figure
fig = plt.figure(constrained_layout=False, figsize=(15, 15))
fig.suptitle('311 Complaints August 2020', fontdict=font)
plt.subplots_adjust(hspace=1.5, wspace=1)
gs = GridSpec(5, 6, figure=fig)

# Complaints by Day
ax1 = fig.add_subplot(gs[0: 2, :])
ax1.set_title('Complaints by Day - August', color='green')
chart1 = ax1.bar(complaints_by_day.index, complaints_by_day)
ax1.set_ylabel('Complaints Count', fontweight='bold')
ax1.set_xlabel('Day', fontweight='bold')
chartlabel(chart1, ax1)

# Complaint by Time To Close
ax2 = fig.add_subplot(gs[2:, -6: -4])
ax2.set_title('Time to Close', color='green')
ax2.pie(time_to_close, autopct='%1.1f%%', shadow=True, startangle=45)
ax2.legend(time_to_close_lbl, loc=2, prop={'size': 7})

# Complaint by Status
ax3 = fig.add_subplot(gs[2:, -4: -2])
ax3.set_title('Complaint by Status', color='green')
ax3.set_ylabel('Complaint Count', fontweight='bold')
ax3.set_xlabel('Status', fontweight='bold')
ax3.set_xticklabels(status_count.index, rotation=45)
chart3 = ax3.bar(status_count.index, status_count)
chartlabel(chart3, ax3)

# Top 5 complaints by borough
ax4 = fig.add_subplot(gs[2:, -2:])
ax4labels = np.arange(len(df_borough_comp.index))

width = .15

ax4.set_title('Top 5 complaints by borough', color='green')
ax4.set_ylabel('Complaint Count', fontweight='bold')
ax4.set_xlabel('Borough', fontweight='bold')
ax4.set_xticks(ax4labels)
ax4.set_xticklabels(df_borough_comp.index, rotation=45)

ax4charts = [ax4.bar(ax4labels - width / 2, mnhtn_count, width, label=df_borough_comp.columns[0]),
             ax4.bar(ax4labels + width / 2, queens_count, width, label=df_borough_comp.columns[1]),
             ax4.bar(ax4labels + 1.5 * width, bronx_count, width, label=df_borough_comp.columns[2]),
             ax4.bar(ax4labels + 2.5 * width, brooklyn_count, width, label=df_borough_comp.columns[3]),
             ax4.bar(ax4labels + 3.5 * width, staten_island_count, width, label=df_borough_comp.columns[4])]
for chart in ax4charts:
    chartlabel(chart, ax4)

ax4.legend(loc=1, prop={'size': 8})

plt.show()
